# 구간 합 계산 (p.481)
"""
구간 합 문제 : 연속적으로 나열된 N개의 수가 있을 때, 특정 구간의 모든 수를 합한 값을 구하는 문제

구간 합 문제는 여러 개의 쿼리로 구성되는 문제 형태로 출제되는 경우가 많음!
-> M개의 쿼리가 존재하는 경우, 각 쿼리는 [Left, Right]로 구성되며, 이는 [Left, Right]의 구간을 의미함

만약 M개의 쿼리 각각, 매번 구간 합을 계산한다면 O(NM)의 시간 복잡도를 가짐!

알고리즘 설계 시 항상 고려할 점은, 여러 번 사용될 만한 정보는 미리 구해 저장해 놓을수록 유리하다는 것!!!

"접두사 합(prefix-sum)" : 리스트의 맨 앞부터 특정 위치까지의 합을 구해 놓은 것
-> 구간 합 계산을 위해 가장 많이 사용하는 기법
-> N개의 수의 위치 각각에 대해 접두사 합을 미리 구해놓는 것

1) N개의 수에 대하여 접두사 합(prefix sum)을 계산하여 배열 P에 저장한다.
2) 매 M개의 쿼리 정보 [L, R]을 확인할 때, 구간 합은 P[R] - P[L -1]이다.

접두사 합을 이용하면, 매 쿼리당 계산 시간은 O(1)
-> 결과적으로 N개의 데이터와 M개의 쿼리가 있을 때, 전체 구간 합을 계산하는 작업은 O(M+N)의 시간 복잡도를 가짐!
"""
# 데이터의 개수 N과 전체 데이터 선언
n = 5
data = [10, 20, 30, 40, 50]

# 접두사 합(prefix sum) 배열 개산
sum_value = 0
prefix_sum = [0]
for i in data:
    sum_value += i
    prefix_sum.append(sum_value)

# 구간 합 계산 (세 번째 수부터 네 번째 수까지)
left = 3
right = 4
print(prefix_sum[right] - prefix_sum[left - 1])