# 투 포인터 : 리스트에 순차적으로 접근해야 할 때 2개의 점의 위치를 기록하면서 처리하는 알고리즘 (p.472)
"""
두 점 (시작점, 끝점)을 움직여가며 찾는 것

ex) '특정한 합을 가지는 부분 연속 수열 찾기' - [1, 2, 3, 2, 5] 중 부분 연속 수열의 합이 5인 경우 찾기
-> [1, (2, 3), 2, 5] / [1, 2, (3, 2), 5] / [1, 2, 3, 2, (5)] (3가지)

이 문제는 모든 원소가 양수이기 때문에...
-> 시작점을 오른쪽으로 이동시키면 항상 합이 감소
-> 끝점을 오른쪽으로 이동시키면 항상 합이 증가
(만약 리스트 내 원소에 음수 데이터가 포함되어 있는 경우네는 투 포인터 알고리즘으로 문제 해겷할 수 x)

1) 시작점(start)과 끝점(end)이 첫 번재 원소의 인덱스(0)를 가리키도록 한다.
2) 현재 부분합이 M과 같다면 카운트한다.
3) 현재 부분합이 M보다 작으면 end를 1 증가시킨다.
4) 현재 부분합이 M보다 크거나 같으면 start를 1 증가시킨다.
5) 모든 경우를 확인할 때까지 2번부터 4번의 과정을 반복한다.
"""
# n = 5 # 데이터의 개수 N
# m = 5 # 찾고자 하는 부분합 M
# data = [1, 2, 3, 2, 5] # 전체 수열
#
# count = 0
# interval_sum = 0
# end = 0
#
# # start를 차례대로 증가시키며 반복
# for start in range(n):
#     # end를 가능한 만큼 이동시키기
#     while interval_sum < m and end < n:
#         interval_sum += data[end]
#         end += 1
#
#     # 부분합이 m일 때 카운트 증가
#     if interval_sum == m:
#         count += 1
#     interval_sum -= data[start]
#
# print(count)


"""
ex) '정렬되어 있는 두 리스트의 합집합'
-> 이미 정렬되어 있는 2개의 리스트가 입력으로 주어짐
-> 두 리스트의 모든 원소를 합쳐서 정렬한 결과를 계산하는 것이 문제의 요구사항

문제 해결을 위해서는 2개의 포인터를 이용하여 각 리스트에서 처리되지 않은 원소 중 가장 작은 원소를 가리키면 됨
기본적으로 이미 정렬된 결과가 주어지므로 리스트 A와 B의 원소를 앞에서부터 확인하면 됨!

1) 정렬된 리스트 A와 B를 입력받는다.
2) 리스트 A에서 처리되지 않은 원소 중 가장 작은 원소를 i가 가리키도록 한다.
3) 리스트 B에서 처리되지 않은 원소 중 가장 작은 원솔르 j가 가리키도록 한다.
4) A[i]와 B[i] 중에서 더 작은 원소를 결과 리스트에 담는다.
5) 리스트 A와 B에서 더 이상 처리할 원소가 없을 때까지 2~4번의 과정을 반복한다.

시간 복잡도 : A와 B의 데이터 개수가 각각 N, M일 때, O(N + M)

* '정렬되어 있는 두 리스트의 합집합' 알고리즘의 경우 병합 정렬(Merge Sort)과 같은 일부 알고리즘에서 사용되고 있다는 점을 기억하자!
"""
# 사전에 정렬된 리스트 A와 B를 선언
n, m = 3, 4
a = [1, 3, 5]
b = [2, 4, 6, 8]

# 리스트 A와 B의 모든 원소를 담을 수 있는 크기의 결과 리스트 초기화
result = [0] * (n + m) # 그냥 append 해도 될듯!
i = 0
j = 0
k = 0

# 모든 원소가 결과 리스트에 담길 때까지 반복
while i < n or j < m:
    # 리스트 B의 모든 원소가 처리되었거나, 리스트 A의 원소가 더 작을 때
    if j >= m or (i < n and a[i] <= b[j]):
        # 리스트 A의 원소를 결과 리스트로 옮기기
        result[k] = a[i]
        i += 1

    # 리스트 A의 모든 원소가 처리되었거나, 리스트 B의 원소가 더 작을 때
    else:
        # 리스트 B의 원소를 결과 리스트로 옮기기
        result[k] = b[j]
        j += 1

    k += 1

#  결과 리스트 출력
print(*result)