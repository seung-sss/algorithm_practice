# 소수 : 2보다 큰 자연수 중에서 1과 자기 자신을 제외한 자연수로는 나누어떨어지지 않는 자연수 (1은 소수 X) (p.466)
"""
[어떤 수 x가 소수인지 아닌지 판별하는 방법]
1) 2부터 (x-1)까지 모든 자연수로 나눠보는 방법 -> 시간 복잡도 O(X)로 비효율적
2) x의 제곱근까지만 확인해보는 방법 (개선된 방법) -> 시간 복잡도 O(X^1/2)
-> ex) x = 8이면, 8의 제곱근 2.828... 이므로, 2까지만 확인해보면 됨!
"""
# import math
#
# # 소수 판별 함수
# def is_prime_number(x):
#     # 2부터 x의 제곱근까지 모든 수를 확인
#     for i in range(2, int(math.sqrt(x)) + 1):
#         # x가 해당 수로 나누어 떨어지는지 아닌지 유무 확인
#         if x % i == 0:
#             return False # 소수가 아님
#     return True # 소수임
#
#
# print(is_prime_number(4))
# print(is_prime_number(7))


"""
[에라토스테네스의 체]
전체 수의 범위 안에서 존재하는 모든 소수를 찾아야 하는 경우!
-> N보다 작거나 같은 모든 소수를 찾을 때 사용

1) 2부터 N까지의 모든 자연수를 나열한다.
2) 남은 수 중에서 아직ㄲ 처리하지 않은 가장 작은 수 i를 찾는다.
3) 남은 수 중에서 i의 배수를 모두 제거한다. (i는 제거하지 않는다)
4) 더 이상 반복할 수 없을 때까지 2번과 3번의 과정을 반복한다.
-> i는 N의 제곱근(가운데 약수)까지만 증가시켜 확인하면 됨!

1은 소수가 아니므로 array[1]의 값은 False로 넣어주면 됨!

시간 복잡도 : O(Nloglog) => 사실상 선형 시간에 동작할 정도!
"""
import math

n = 1000 # 2부터 1000까지의 모든 수에 대해 소수 판별
array = [True for _ in range(n + 1)] # 처음엔 모든 수가 소수(True)인 것으로 초기화 (0과 1은 제외)

# 추가할 부분
array[0] = False
array[1] = False

# 에라토스테네스의 체 알고리즘
for i in range(2, int(math.sqrt(n)) + 1): # 2부터 n의 제곱근까지 모든 수를 확인
    if array[i]:
        for j in range(i * 2, n + 1, i):
            array[j] = False

# 모든 소수 출력
for i in range(2, n + 1):
    if array[i]:
        print(i, end=' ')