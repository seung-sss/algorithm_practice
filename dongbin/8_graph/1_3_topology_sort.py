# 위상 정렬
"""
위상 정렬 : 순서가 정해져 있는 일련의 작업을 차례대로 수행해야 할 때 사용할 수 있는 알고리즘
-> 방향 그래프의 모든 노드를 '방향성에 거스르지 않도록 순서대로 나열하는 것'

(예시) '선수과목을 고려한 학습 순서 설정'
ex> 컴퓨터공학과 커리큘럼 : '자료구조' -> '알고리즘' 수강 권장
-> '자료구조', '알고리즘'을 각각의 노드로 표현
-> '자료구조'에서 '알고리즘'으로 이어질 수 있도록 방향성을 갖는 간선 그릴 수 있음

(즉, 그래프상에서 선후관계가 있다면, 위상 정렬 수행하여 모든 선후 관계를 지키는 전체 순서 계산할 수 있음!)

ex> 컴퓨터공학과 커리큘럼 : '자료구조' -> '알고리즘' / '자료구조' -> '고급 알고리즘' / '알고리즘' -> '고급 알고리즘'
-> '자료구조' -> '알고리즘' -> '고급 알고리즘' 순서

* 진입차수 : 특정한 노드로 '들어오는' 간선의 개수
-> 위의 예시에서, '고급 알고리즘' 노드는 2개의 선수과목 가지고 있음 = 그래프상에서 진입차수가 2인 것!!

<위상 정렬 알고리즘 수행 방법>
1) 진입차수가 0인 노드를 큐에 넣는다.
2) 큐가 빌 때까지 다음의 과정 반복한다.
    2_1) 큐에서 원소를 꺼내 해당 노드에서 출발하는 간선을 그래프에서 제거한다.
    2_2) 새롭게 진입차수가 0이 된 노드를 큐에 넣는다.

if, 모든 원소 방문하기 전에 큐가 빈다면 사이클이 존재한다고 판단할 수 있음!
-> 즉, 큐에서 원소가 V번 추출되기 전에 큐가 비어버리면 사이클이 발생한 것!
-> 사이클이 존재하는 경우 사이클에 포함되어 있는 원소 중에서 어떠한 원소도 큐에 들어오지 못함 (진입차수가 0이 되지 못하기 때문!)
-> 기본적으로 위상 정렬 문제에서는 사이클이 발생하지 않는다고 명시하는 경우가 많음! (2절 실전 문제에서 사이클 발생하는 경우 처리하는 문제 있음!)

시간 복잡도 : O(V + E)
-> 위상 정렬 수행 시, 모든 노드를 확인하면서, 해당 노드에서 출발하는 간선을 차례대로 제거
-> 즉, 노드와 간선을 모두 확인하는 것!

<test case>
7 8
1 2
1 5
2 3
2 6
3 4
4 7
5 6
6 4
"""
# 위상 정렬 소스코드
from collections import deque

# v : 노드 개수 / e : 간선 개수
v, e = map(int, input().split())
# 모든 노드에 대한 진입차수는 0으로 초기화
indegree = [0] * (v + 1)
# 각 노드에 연결된 간선 정보를 담기 위한 연결 리스트(그래프) 초기화
graph = [[] for _ in range(v + 1)]

# 방향 그래프의 모든 간선 정보를 입력받기
for _ in range(e):
    a, b = map(int, input().split())
    graph[a].append(b)
    # 진입차수 1 증가
    indegree[b] += 1


# 위상 정렬 함수
def topology_sort():
    result = [] # 알고리즘 수행 결과를 담을 리스트
    q = deque() # 큐 기능을 위한 deque 라이브러리 사용

    for i in range(1, v + 1):
        if indegree[i] == 0:
            q.append(i)

    # 큐가 빌 때까지 반복
    while q:
        # 큐에서 원소 꺼내기
        now = q.popleft()
        result.append(now)

        # 해당 원소와 연결된 노드들의 진입차수에서 1 빼기
        for i in graph[now]:
            indegree[i] -= 1

            # 새롭게 진입차수가 0이 되는 노드를 큐에 삽입
            if indegree[i] == 0:
                q.append(i)

    # 위상 정렬을 수행한 결과 출력
    print(*result)

topology_sort()