# 신장 트리
"""
신장 트리 : 하나의 그래프가 있을 때 모든 노드를 포함하면서 사이클이 존재하지 않는 부분 그래프
-> 조건 : '모든 노드가 포함되어 서로 연결' + '사이클이 존재하지 않는다'
"""

"""
최소 신장 트리 알고리즘 : 신장 트리 중에서 최소 비용으로 만들 수 있는 신장트리를 찾는 알고리즘

[크루스칼 알고리즘]
그리디 알고리즘으로 분류됨
-> 먼저 모든 간선에 대하여 정렬을 수행
-> 가장 거리가 짧은 간선부터 집합에 포함
-> 이 때 사이클을 발생시킬 수 있는 간선의 경우, 집합에 포함시키지 않음!

1) 간선 데이터를 비용에 따라 오름차순으로 정렬한다.
2) 간선을 하나씩 확인하며 현재의 간선이 사이클을 발생시키는지 확인한다.
    2_1) 사이클이 발생하지 않는 경우 최소 신장 트리에 포함시킨다. (union 함수 수행)
    2_2) 사이클이 발생하는 경우 최소 신장 트리에 포함시키지 않는다.
3) 모든 간선에 대하여 2번의 과정을 반복한다.

최소 신장 트리는 일종의 트리 자료구조로, 최종적으로 신장 트리에 포함되는 간선의 개수가 '노드의 개수 -1'과 같다!

크루스칼 알고리즘의 핵심 원리는 가장 거리가 짧은 간선부터 차례대로 집합에 추가하는 것! (사이클 발생시키는 간선은 제외)

시간 복잡도 : 간선의 개수가 E개 일 때, O(ElogE)
-> 크루스칼 알고리즘에서 시간이 가장 오래 걸리는 부분이 간선을 정렬하는 작업이기 때문!
-> 크루스칼 내부에서 사용되는 서로소 집합 알고리즘의 시간 복잡도는 정렬 알고리즘의 시간 복잡도보다 작으므로 무시함!

<test case>
7 9
1 2 29
1 5 75
2 3 35
2 6 34
3 4 7
4 6 23
4 7 13
5 6 53
6 7 25
>> 159
"""
# 크루스칼 알고리즘 소스코드


# 특정 원소가 속한 집합을 찾기
def find_parent(parent, x):
    # 루트 노드가 아니라면, 루트 노드를 찾을 때까지 재귀적으로 호출
    if parent[x] != x:
        parent[x] = find_parent(parent, parent[x])
    return parent[x]


# 두 원소가 속한 집합을 합치기
def union_parent(parent, a, b):
    a = find_parent(parent, a)
    b = find_parent(parent, b)

    if a < b:
        parent[b] = a
    else:
        parent[a] = b


# v : 노드 개수 / e : 간선 개수
v, e = map(int, input().split())
parent = [0] * (v + 1) # 부모 테이블 초기화

# 모든 간선을 담을 리스트와 최종 비용을 담을 변수
edges = []
result = 0

# 부모 테이블상에서, 부모를 자기 자신으로 초기화
for i in range(1, v + 1):
    parent[i] = i

# 모든 간선에 대한 정보를 입력받기
for _ in range(e):
    a, b, cost = map(int, input().split())
    # 비용순으로 정렬하기 위해서 튜플의 첫 번째 원소를 비용으로 설정
    edges.append((cost, a, b))

# 간선을 비용순으로 정렬
edges.sort()

# 간선을 하나씩 확인하며
for edge in edges:
    cost, a, b = edge

    # 사이클이 발생하지 않는 경우에만 집합에 포함
    if find_parent(parent, a) != find_parent(parent, b):
        union_parent(parent, a, b)
        result += cost

print(result)